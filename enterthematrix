#!/usr/bin/env python3

NAME        = 'enterthematrix'
DESCRIPTION = 'a classic matrix animation using curses'

# DEFAULTS
BANDWIDTH          = 4
TRAFFIC            = 16
NEOS_INFLUENCE     = 0.64e-3
ANIMATION_INTERVAL = 0.02
ASYNC_DAMPER       = 0.4
LIMITER            = 0
EXIT_KEYS          = ('q', 'Q', 'e', 'E')
MAX_COLS           = 1280
USE_ASYNC          = True

from sys import argv
from argparse import ArgumentParser
from random import choice, random
from time import sleep
from asyncio import run
from curses import (
    wrapper,
    curs_set,
    use_default_colors,
    init_pair,
    color_pair,
    COLOR_GREEN,
)
PAIR_HIGHLIGHT = 0
PAIR_STANDARD  = 1
SPACE          = chr(0x20)

class MatrixAnimation:
    def __init__(self, stdscr, **kwargs):
        self.stdscr = stdscr
        self.stdscr.nodelay(1)
        curs_set(0)
        use_default_colors()
        init_pair(PAIR_STANDARD, COLOR_GREEN, -1)

        self.clean_kwargs(kwargs)

        self.bandwidth          = kwargs.get('bandwidth', BANDWIDTH)
        self.traffic            = kwargs.get('traffic', TRAFFIC)
        self.neos_influence     = kwargs.get('neos_influence', NEOS_INFLUENCE)
        self.animation_interval = kwargs.get('animation_interval', ANIMATION_INTERVAL)
        self.async_damper       = kwargs.get('async_damper', ASYNC_DAMPER)
        self.limiter            = kwargs.get('limiter', LIMITER)
        self.exit_keys          = kwargs.get('exit_keys', EXIT_KEYS)
        self.max_cols           = max(kwargs.get('max_cols', MAX_COLS), self.num_cols)
        self.use_async          = kwargs.get('use_async', USE_ASYNC) and self.can_use_async()

        self.alphabet     = self.get_alphabet()
        self.char_streams = [ [] for _ in range(self.max_cols) ]
        self.num_streams  = 0

        if self.use_async:
            run(self.run_async())
        else:
            self.run()

    def clean_kwargs(self, kwargs):
        bandwidth = kwargs.get('bandwidth', 0)
        traffic = kwargs.get('traffic', 0)
        animation_interval = kwargs.get('animation_interval', 0)
        async_damper = kwargs.get('async_damper', 0)
        limiter = kwargs.get('limiter', 0)

        if bandwidth < 0:
            del kwargs['bandwidth']
        if traffic < 0:
            del kwargs['traffic']
        if animation_interval < 0:
            del kwargs['animation_interval']
        if async_damper < 0 or async_damper >= 1:
            del kwargs['async_damper']
        if limiter < 0 or limiter >= 1:
            del kwargs['limiter']

    def can_use_async(self):
        try:
            from asyncio import to_thread
        except ImportError:
            return False
        return True

    def get_alphabet(self):
        k, num_katas  = 0xff66,   56
        a, num_alphas = ord('A'), 26
        n, num_nums   = ord('0'), 10

        return [
            *range(k, k + num_katas),
            *range(a, a + num_alphas),
            *range(n, n + num_nums),
        ]

    @property
    def num_rows(self):
        return self.stdscr.getmaxyx()[0]

    @property
    def num_cols(self):
        return self.stdscr.getmaxyx()[1]

    @property
    def max_streams(self):
        return int(self.num_cols * self.bandwidth * (1 - self.limiter))

    async def run_async(self):
        from asyncio import to_thread, sleep as async_sleep, gather
        self.animation_interval *= (1 / (1 - self.async_damper))
        key = None
        while key not in map(ord, self.exit_keys):
            async_next_frame = to_thread(self.next_frame)
            async_animation_interval = async_sleep(self.animation_interval)
            await gather(async_next_frame, async_animation_interval)
            key = self.stdscr.getch()

    def run(self):
        key = None
        while key not in map(ord, self.exit_keys):
            self.next_frame()
            sleep(self.animation_interval)
            key = self.stdscr.getch()

    def next_frame(self):
        self.add_streams()
        self.expand_streams()
        self.render_streams()
        self.reduce_streams()
        self.stdscr.refresh()

    def add_streams(self):
        for _ in range(self.traffic):
            if self.num_streams < self.max_streams:
                self.add_stream()

    def add_stream(self):
        col = choice(range(self.num_cols))
        if len(self.char_streams[col]) < self.bandwidth:
            max_size = choice(range(1, self.num_rows + 1))
            stream = CharStream(max_size)
            self.char_streams[col].append(stream)
            self.num_streams += 1

    def expand_streams(self):
        for col_streams in self.char_streams:
            for stream in col_streams:
                self.expand_stream(stream)

    def expand_stream(self, stream):
        char = chr(choice(self.alphabet))
        is_influenced_by_neo = random() <= self.neos_influence
        stream.expand(char, is_influenced_by_neo)

    def reduce_streams(self):
        for col, col_streams in enumerate(self.char_streams):
            for idx, stream in enumerate(col_streams):
                if stream.is_full:
                    is_reduced = self.reduce_stream(stream)
                    if is_reduced:
                        self.char_streams[col][idx] = None
                        self.num_streams -= 1
            self.remove_reduced_streams(col)

    def reduce_stream(self, stream):
        stream.reduce()
        return stream.is_reduced

    def remove_reduced_streams(self, col):
        idx = 0
        while idx < len(self.char_streams[col]):
            if self.char_streams[col][idx] is None:
                self.char_streams[col].pop(idx)
            else:
                idx += 1

    def render_streams(self):
        for col, col_streams in enumerate(self.char_streams):
            for stream in col_streams:
                self.render_stream(stream, col)

    def render_stream(self, stream, col):
        for idx in range(len(stream)):
            row = idx
            is_highlighted = stream.is_highlighted(idx)
            self.addch(row, col, stream[idx].val, is_highlighted)

    def addch(self, row, col, char, is_highlighted=False):
        if self.can_addch(row, col):
            color = PAIR_HIGHLIGHT if is_highlighted else PAIR_STANDARD
            self.stdscr.addch(row, col, char, color_pair(color))

    def can_addch(self, row, col):
        return row < self.num_rows - 1 and col < self.num_cols - 1

class CharStream:
    def __init__(self, max_size):
        self.max_size = max_size
        self.chars = []
        self.is_reducing = False
        self.is_reduced = False
        self.reduce_idx = 0

    def __len__(self):
        return len(self.chars)

    def __getitem__(self, idx):
        return self.chars[idx]

    @property
    def is_full(self):
        return len(self) >= self.max_size

    def expand(self, char, is_influenced_by_neo=False):
        if not self.is_full and not self.is_reducing:
            self.chars.append(Char(char, is_influenced_by_neo))

    def reduce(self):
        self.is_reducing = True
        if self.reduce_idx >= len(self):
            self.is_reduced = True
            return
        if not self.chars[self.reduce_idx].is_influenced_by_neo:
            self.chars[self.reduce_idx].val = SPACE
        self.reduce_idx += 1

    def is_highlighted(self, idx):
        return self[idx].is_influenced_by_neo or \
            (self.is_reducing and idx == self.reduce_idx) or \
            (not self.is_reducing and idx == (len(self) - 1))

class Char:
    def __init__(self, val, is_influenced_by_neo=False):
        self.val = val
        self.is_influenced_by_neo = is_influenced_by_neo

def main():
    arg_parser = ArgumentParser(prog=NAME, description=DESCRIPTION)

    arg_parser.add_argument('-b', '--bandwidth', \
        help='The maximum number of character animation streams per text column [0-inf)', \
        type=int, metavar='INT', default=BANDWIDTH)

    arg_parser.add_argument('-t', '--traffic', \
        help='The number of character animation streams to create per animation frame [0-inf)', \
        type=int, metavar='INT', default=TRAFFIC)

    arg_parser.add_argument('-n', '--neos-influence', \
        help='Follow the white rabbit [0-1]', \
        type=float, metavar='FLOAT', default=NEOS_INFLUENCE, dest='neos_influence')

    arg_parser.add_argument('-a', '--animation-interval', \
        help='The amount of time in seconds between animation frames [0-inf)', \
        type=float, metavar='FLOAT', default=ANIMATION_INTERVAL, dest='animation_interval')

    arg_parser.add_argument('-d', '--async-damper', \
        help='Slows the animation by a factor of the damper value when using async [0-1)', \
        type=float, metavar='FLOAT', default=ASYNC_DAMPER, dest='async_damper')

    arg_parser.add_argument('-l', '--limiter', \
        help='Limits the maximum number of streams by a factor of the limiter value [0-1)', \
        type=float, metavar='FLOAT', default=LIMITER)

    arg_parser.add_argument('-e', '--exit-keys', \
        help='A space separated list of keys to initiate exit eg. "q e x"', \
        nargs='+', metavar='KEY', default=EXIT_KEYS, dest='exit_keys')

    arg_parser.add_argument('-c', '--max-cols', \
        help='The maximum number of text columns to animate', \
        type=int, metavar='INT', default=MAX_COLS, dest='max_cols')

    arg_parser.add_argument('--no-use-async', \
        help='Turn off async frame rendering in supported environments', \
        action='store_false', default=USE_ASYNC, dest='use_async')

    kwargs = vars(arg_parser.parse_args(argv[1:]))
    wrapper(MatrixAnimation, **kwargs)
    exit(0)

if __name__ == '__main__':
    main()

